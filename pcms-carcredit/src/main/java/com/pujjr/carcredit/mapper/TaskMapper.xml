<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.pujjr.carcredit.dao.TaskMapper">
	<resultMap id="ToDoTaskResultMap" type="com.pujjr.carcredit.po.ToDoTaskPo">
		<result column="taskId" property="taskId" jdbcType="VARCHAR" />
		<result column="taskName" property="taskName" jdbcType="VARCHAR" />
		<result column="taskDefKey" property="taskDefKey" jdbcType="VARCHAR" />
		<result column="assignee" property="assignee" jdbcType="VARCHAR" />
		<result column="businessKey" property="businessKey" jdbcType="VARCHAR" />
		<result column="procInstId" property="procInstId" jdbcType="VARCHAR" />
		<result column="procDefId" property="procDefId" jdbcType="VARCHAR" />
		<result column="procDefKey" property="procDefKey" jdbcType="VARCHAR" />
		<result column="runPathId" property="runPathId" jdbcType="VARCHAR" />
		<result column="startTime" property="startTime" jdbcType="TIMESTAMP" />
		<result column="processTime" property="processTime" jdbcType="TIMESTAMP" />
		<result column="inJumpType" property="inJumpType" jdbcType="VARCHAR" />
		<result column="parentTaskName" property="parentTaskName" jdbcType="VARCHAR" />
		<result column="parentAssignee" property="parentAssignee" jdbcType="VARCHAR" />
		<result column="taskRouter" property="taskRouter" jdbcType="VARCHAR" />
		<result column="productName" property="productName" jdbcType="VARCHAR" />
		<result column="tenantName" property="tenantName" jdbcType="VARCHAR" />
		<result column="tenantIdNo" property="tenantIdNo" jdbcType="VARCHAR" />
		<result column="createTime" property="createTime" jdbcType="TIMESTAMP" />
		<result column="branchName" property="branchName" jdbcType="VARCHAR" />
		<result column="totalFinanceAmount" property="totalFinanceAmount" jdbcType="DOUBLE" />
		<result column="period" property="period" jdbcType="INTEGER" />
	</resultMap>

	<select id="selectToDoTaskList" resultMap="ToDoTaskResultMap">
	select * from 
	(
		select
		task.ID_ as taskId,
		runpath.NODE_LEVEL as nodeLevel,
		task.NAME_ as taskName,
		task.TASK_DEF_KEY_ as taskDefKey,
		task.ASSIGNEE_ as assignee,
		exec.BUSINESS_KEY_ as businessKey,
		task.PROC_INST_ID_ as procInstId,
		task.PROC_DEF_ID_ as procDefId,
		def.KEY_ as procDefKey,
		runpath.ID as runPathId,
		runpath.START_TIME as startTime,
		runpath.PROCESS_TIME as processTime,
		runpath.IN_JUMP_TYPE as inJumpType,
		prunpath.ACT_NAME as parentTaskName,
		prunpath.ASSIGNEE as parentAssignee,
		form.form_name as taskRouter,
		product.PRODUCT_NAME as productName,
		applyTenant.NAME as  tenantName,
		applyTenant.ID_NO as tenantIdNo,
		apply.CREATE_TIME as createTime,
		branch.BRANCH_NAME as branchName,
		apply.TOTAL_FINANCE_AMT as totalFinanceAmount,
		apply.PERIOD as period
		from act_ru_task task
		left join act_ru_execution exec on task.PROC_INST_ID_ = exec.ID_
		left join act_re_procdef def on task.PROC_DEF_ID_ = def.ID_
		left join t_workflow_runpath runpath on runpath.PROC_INST_ID =
		task.PROC_INST_ID_ and runpath.ACT_ID = task.TASK_DEF_KEY_ 
		left join t_workflow_runpath prunpath on runpath.PARENT_USERTASK_PATH_ID =prunpath.ID
		left join t_workflow_version flowversion on flowversion.activiti_procdef_id = task.PROC_DEF_ID_ 
		left join t_workflow_node_form form on form.workflow_version_id = flowversion.id and task.TASK_DEF_KEY_ = form.node_id
		left join T_APPLY apply on exec.BUSINESS_KEY_ = apply.APP_ID
		left join T_APPLY_TENANT applyTenant on exec.BUSINESS_KEY_ = applyTenant.APP_ID
		left join T_PRODUCT product on apply.PRODUCT_CODE = product.PRODUCT_CODE
		left join SYS_BRANCH branch on branch.BRANCH_CODE = apply.CREATE_BRANCH_CODE
		where 
		task.ASSIGNEE_ = #{param.assignee} and def.KEY_ = 'PCCA'
		<if test="param.appId!=null and param.appId!=''">
			and apply.APP_ID like CONCAT("%",CONCAT(#{param.appId},'%'))
		</if>
		<if test="param.name!=null and param.name!=''">
			and applyTenant.NAME like CONCAT("%",CONCAT(#{param.name},'%'))
		</if>
		<if test="param.appStatus!=null and param.appStatus!=''">
			and apply.status = #{param.appStatus}
		</if>
		<if test="param.inTaskDefKeyList.size()>0">
			and task.TASK_DEF_KEY_ in 
			<foreach item="item" index="index" collection="param.inTaskDefKeyList"
			open="(" separator="," close=")">
				#{item}
			</foreach>	
		</if>
		<if test="param.outTaskDefKeyList.size()>0">
			and task.TASK_DEF_KEY_ not in 
			<foreach item="item" index="index" collection="param.outTaskDefKeyList"
			open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		order by runpath.START_TIME desc 
	) tmp group by taskId	
	</select>
	<select id="selectTaskCntAndOnlineAccountIdByWorkgroupId" resultType="HashMap">
		select 
		  		b.account_id,count(*) as cnt
		  	from 
			  	sys_workgroup_account a 
			  	left join sys_account b on a.SYSACCOUNT_ID = b.id
			  	left join act_ru_task c on b.account_id = c.assignee_
		  	where 
				a.WORKGROUP_ID = #{workgroupId}
				<![CDATA[
					and (timestampdiff(SECOND,b.last_heartbeat_time,now()) <= 60 and timestampdiff(SECOND,b.last_heartbeat_time,now()) >= 0)
				]]>
		  		group by b.account_id
	</select>
	<select id="selectTaskAssignCntInfo" resultType="HashMap">
		select b.account_id as assignee , b.account_name as accountName,if(a.cnt  is null ,0,a.cnt) as curTaskCnt ,d.max_task_cnt as maxTaskCnt , d.workgroup_id as workgroupId
		from
		(
			select assignee_ as assignee,count(*) as cnt
			from act_ru_task 
			group by assignee_
		) a 
		right join  sys_account  b on a.assignee = b.account_id
		inner join t_rule_member_taskcnt d on d.account_id = b.id
		and d.id in 
		<foreach item="item" index="index" collection="taskCntRuleIds"
			open="(" separator="," close=")">
				#{item}
		</foreach>
	</select>
	
	<resultMap id="WorkflowProcessResultMap" type="com.pujjr.carcredit.po.WorkflowProcessResultPo">
		<result column="pathId" property="pathId" jdbcType="VARCHAR" />
		<result column="actId" property="actId" jdbcType="VARCHAR" />
		<result column="actName" property="actName" jdbcType="VARCHAR" />
		<result column="assigneeName" property="assigneeName" jdbcType="VARCHAR" />
		<result column="inJumpType" property="inJumpType" jdbcType="VARCHAR" />
		<result column="outJumpType" property="outJumpType" jdbcType="VARCHAR" />
		<result column="outJumpType" property="outJumpType" jdbcType="VARCHAR" />
		<result column="isMultiAct" jdbcType="BIT" property="isMultiAct" />
		<result column="startTime" property="startTime" jdbcType="TIMESTAMP" />
		<result column="processTime" property="processTime" jdbcType="TIMESTAMP" />
		<result column="endTime" property="endTime" jdbcType="TIMESTAMP" />
		<result column="message" property="message" jdbcType="VARCHAR" />
		<result column="processResult" property="processResult" jdbcType="VARCHAR" />
		<result column="inJumpType" property="inJumpType" jdbcType="VARCHAR" />
		<result column="processDesc" property="processDesc" jdbcType="VARCHAR" />
		<result column="comment" property="comment" jdbcType="VARCHAR" />
	</resultMap>
	
	<select id="selectWorkflowProcessResult" resultMap="WorkflowProcessResultMap">
	    select 
		runpath.ID as pathId,
		runpath.ACT_ID as actId,
		runpath.ACT_NAME as actName,
		runpath.IN_JUMP_TYPE as inJumpType,
		runpath.OUT_JUMP_TYPE as outJumpType,
		runpath.START_TIME as startTime,  
		runPath.PROCESS_TIME as processTime,
		runpath.END_TIME as endTime,
		runpath.MESSAGE as message,
		runpath.IS_MULTI_ACT as isMultiAct,
		runpath.ASSIGNEE as assigneeName
		from t_workflow_runpath  runpath
		where runpath.ACT_TYPE ='userTask'   and runpath.PROC_INST_ID = #{procInstId}
		order by runpath.PROC_INST_ID,runpath.NODE_LEVEL desc	    
	</select>
	<select id="selectUserTaskDefineGroupInfo" resultType="HashMap">
		select  
		task.NAME_ as taskName,
		task.TASK_DEF_KEY_ as taskDefKey,
		count(*) as count  
		from 
		act_ru_task task 
		left join act_re_procdef def on task.PROC_DEF_ID_ = def.ID_
		where 
		task.assignee_ = #{param.assignee} and def.KEY_ = 'PPCA'
		<if test="param.inTaskDefKeyList.size()>0">
			and task.TASK_DEF_KEY_ in 
			<foreach item="item" index="index" collection="param.inTaskDefKeyList"
			open="(" separator="," close=")">
				#{item}
			</foreach>	
		</if>
		<if test="param.outTaskDefKeyList.size()>0">
			and task.TASK_DEF_KEY_ not in 
			<foreach item="item" index="index" collection="param.outTaskDefKeyList"
			open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		group by task.NAME_,task.TASK_DEF_KEY_
	</select>
</mapper>